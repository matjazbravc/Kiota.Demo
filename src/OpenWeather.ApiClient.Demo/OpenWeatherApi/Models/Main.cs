// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenWeather.ApiClient.Demo.Models
{
    #pragma warning disable CS1591
    public class Main : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Atmospheric pressure on the ground level, hPa</summary>
        public double? GrndLevel { get; set; }
        /// <summary>Humidity, %</summary>
        public int? Humidity { get; set; }
        /// <summary>Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa</summary>
        public int? Pressure { get; set; }
        /// <summary>Atmospheric pressure on the sea level, hPa</summary>
        public double? SeaLevel { get; set; }
        /// <summary>Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.</summary>
        public double? Temp { get; set; }
        /// <summary>Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.</summary>
        public double? TempMax { get; set; }
        /// <summary>Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.</summary>
        public double? TempMin { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="OpenWeather.ApiClient.Demo.Models.Main"/> and sets the default values.
        /// </summary>
        public Main()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="OpenWeather.ApiClient.Demo.Models.Main"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static OpenWeather.ApiClient.Demo.Models.Main CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OpenWeather.ApiClient.Demo.Models.Main();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "grnd_level", n => { GrndLevel = n.GetDoubleValue(); } },
                { "humidity", n => { Humidity = n.GetIntValue(); } },
                { "pressure", n => { Pressure = n.GetIntValue(); } },
                { "sea_level", n => { SeaLevel = n.GetDoubleValue(); } },
                { "temp", n => { Temp = n.GetDoubleValue(); } },
                { "temp_max", n => { TempMax = n.GetDoubleValue(); } },
                { "temp_min", n => { TempMin = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("grnd_level", GrndLevel);
            writer.WriteIntValue("humidity", Humidity);
            writer.WriteIntValue("pressure", Pressure);
            writer.WriteDoubleValue("sea_level", SeaLevel);
            writer.WriteDoubleValue("temp", Temp);
            writer.WriteDoubleValue("temp_max", TempMax);
            writer.WriteDoubleValue("temp_min", TempMin);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
