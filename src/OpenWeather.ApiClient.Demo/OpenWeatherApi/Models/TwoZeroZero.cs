// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace OpenWeather.ApiClient.Demo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class TwoZeroZero : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Internal parameter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Base { get; set; }
#nullable restore
#else
        public string Base { get; set; }
#endif
        /// <summary>The clouds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Clouds? Clouds { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Clouds Clouds { get; set; }
#endif
        /// <summary>Internal parameter</summary>
        public int? Cod { get; set; }
        /// <summary>The coord property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Coord? Coord { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Coord Coord { get; set; }
#endif
        /// <summary>Time of data calculation, unix, UTC</summary>
        public int? Dt { get; set; }
        /// <summary>City ID</summary>
        public int? Id { get; set; }
        /// <summary>The main property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Main? Main { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Main Main { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The rain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Rain? Rain { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Rain Rain { get; set; }
#endif
        /// <summary>The snow property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Snow? Snow { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Snow Snow { get; set; }
#endif
        /// <summary>The sys property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Sys? Sys { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Sys Sys { get; set; }
#endif
        /// <summary>Visibility, meter</summary>
        public int? Visibility { get; set; }
        /// <summary>(more info Weather condition codes)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::OpenWeather.ApiClient.Demo.Models.Weather>? Weather { get; set; }
#nullable restore
#else
        public List<global::OpenWeather.ApiClient.Demo.Models.Weather> Weather { get; set; }
#endif
        /// <summary>The wind property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::OpenWeather.ApiClient.Demo.Models.Wind? Wind { get; set; }
#nullable restore
#else
        public global::OpenWeather.ApiClient.Demo.Models.Wind Wind { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::OpenWeather.ApiClient.Demo.Models.TwoZeroZero"/> and sets the default values.
        /// </summary>
        public TwoZeroZero()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::OpenWeather.ApiClient.Demo.Models.TwoZeroZero"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::OpenWeather.ApiClient.Demo.Models.TwoZeroZero CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::OpenWeather.ApiClient.Demo.Models.TwoZeroZero();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "base", n => { Base = n.GetStringValue(); } },
                { "clouds", n => { Clouds = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Clouds>(global::OpenWeather.ApiClient.Demo.Models.Clouds.CreateFromDiscriminatorValue); } },
                { "cod", n => { Cod = n.GetIntValue(); } },
                { "coord", n => { Coord = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Coord>(global::OpenWeather.ApiClient.Demo.Models.Coord.CreateFromDiscriminatorValue); } },
                { "dt", n => { Dt = n.GetIntValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "main", n => { Main = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Main>(global::OpenWeather.ApiClient.Demo.Models.Main.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "rain", n => { Rain = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Rain>(global::OpenWeather.ApiClient.Demo.Models.Rain.CreateFromDiscriminatorValue); } },
                { "snow", n => { Snow = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Snow>(global::OpenWeather.ApiClient.Demo.Models.Snow.CreateFromDiscriminatorValue); } },
                { "sys", n => { Sys = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Sys>(global::OpenWeather.ApiClient.Demo.Models.Sys.CreateFromDiscriminatorValue); } },
                { "visibility", n => { Visibility = n.GetIntValue(); } },
                { "weather", n => { Weather = n.GetCollectionOfObjectValues<global::OpenWeather.ApiClient.Demo.Models.Weather>(global::OpenWeather.ApiClient.Demo.Models.Weather.CreateFromDiscriminatorValue)?.AsList(); } },
                { "wind", n => { Wind = n.GetObjectValue<global::OpenWeather.ApiClient.Demo.Models.Wind>(global::OpenWeather.ApiClient.Demo.Models.Wind.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("base", Base);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Clouds>("clouds", Clouds);
            writer.WriteIntValue("cod", Cod);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Coord>("coord", Coord);
            writer.WriteIntValue("dt", Dt);
            writer.WriteIntValue("id", Id);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Main>("main", Main);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Rain>("rain", Rain);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Snow>("snow", Snow);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Sys>("sys", Sys);
            writer.WriteIntValue("visibility", Visibility);
            writer.WriteCollectionOfObjectValues<global::OpenWeather.ApiClient.Demo.Models.Weather>("weather", Weather);
            writer.WriteObjectValue<global::OpenWeather.ApiClient.Demo.Models.Wind>("wind", Wind);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
